// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PriceLevelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PriceLevel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PriceLevel<'a> {
  type Inner = PriceLevel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PriceLevel<'a> {
  pub const VT_PRICE: flatbuffers::VOffsetT = 4;
  pub const VT_SIZE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PriceLevel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PriceLevelArgs
  ) -> flatbuffers::WIPOffset<PriceLevel<'bldr>> {
    let mut builder = PriceLevelBuilder::new(_fbb);
    builder.add_size(args.size);
    builder.add_price(args.price);
    builder.finish()
  }

  pub fn unpack(&self) -> PriceLevelT {
    let price = self.price();
    let size = self.size();
    PriceLevelT {
      price,
      size,
    }
  }

  #[inline]
  pub fn price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PriceLevel::VT_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn size(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PriceLevel::VT_SIZE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PriceLevel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("price", Self::VT_PRICE, false)?
     .visit_field::<f64>("size", Self::VT_SIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct PriceLevelArgs {
    pub price: f64,
    pub size: f64,
}
impl<'a> Default for PriceLevelArgs {
  #[inline]
  fn default() -> Self {
    PriceLevelArgs {
      price: 0.0,
      size: 0.0,
    }
  }
}

pub struct PriceLevelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PriceLevelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_price(&mut self, price: f64) {
    self.fbb_.push_slot::<f64>(PriceLevel::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_size(&mut self, size: f64) {
    self.fbb_.push_slot::<f64>(PriceLevel::VT_SIZE, size, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PriceLevelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PriceLevelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PriceLevel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PriceLevel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PriceLevel");
      ds.field("price", &self.price());
      ds.field("size", &self.size());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PriceLevelT {
  pub price: f64,
  pub size: f64,
}
impl Default for PriceLevelT {
  fn default() -> Self {
    Self {
      price: 0.0,
      size: 0.0,
    }
  }
}
impl PriceLevelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PriceLevel<'b>> {
    let price = self.price;
    let size = self.size;
    PriceLevel::create(_fbb, &PriceLevelArgs{
      price,
      size,
    })
  }
}
pub enum OrderBookOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OrderBook<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrderBook<'a> {
  type Inner = OrderBook<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrderBook<'a> {
  pub const VT_TOPIC: flatbuffers::VOffsetT = 4;
  pub const VT_BIDS: flatbuffers::VOffsetT = 6;
  pub const VT_ASKS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrderBook { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderBookArgs<'args>
  ) -> flatbuffers::WIPOffset<OrderBook<'bldr>> {
    let mut builder = OrderBookBuilder::new(_fbb);
    if let Some(x) = args.asks { builder.add_asks(x); }
    if let Some(x) = args.bids { builder.add_bids(x); }
    if let Some(x) = args.topic { builder.add_topic(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> OrderBookT {
    let topic = self.topic().map(|x| {
      x.to_string()
    });
    let bids = self.bids().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let asks = self.asks().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    OrderBookT {
      topic,
      bids,
      asks,
    }
  }

  #[inline]
  pub fn topic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBook::VT_TOPIC, None)}
  }
  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel>>>>(OrderBook::VT_BIDS, None)}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel>>>>(OrderBook::VT_ASKS, None)}
  }
}

impl flatbuffers::Verifiable for OrderBook<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("topic", Self::VT_TOPIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceLevel>>>>("bids", Self::VT_BIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceLevel>>>>("asks", Self::VT_ASKS, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderBookArgs<'a> {
    pub topic: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>>>,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>>>,
}
impl<'a> Default for OrderBookArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderBookArgs {
      topic: None,
      bids: None,
      asks: None,
    }
  }
}

pub struct OrderBookBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBookBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_topic(&mut self, topic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBook::VT_TOPIC, topic);
  }
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceLevel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBook::VT_BIDS, bids);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceLevel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBook::VT_ASKS, asks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBookBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBookBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrderBook<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrderBook<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrderBook");
      ds.field("topic", &self.topic());
      ds.field("bids", &self.bids());
      ds.field("asks", &self.asks());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OrderBookT {
  pub topic: Option<String>,
  pub bids: Option<Vec<PriceLevelT>>,
  pub asks: Option<Vec<PriceLevelT>>,
}
impl Default for OrderBookT {
  fn default() -> Self {
    Self {
      topic: None,
      bids: None,
      asks: None,
    }
  }
}
impl OrderBookT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OrderBook<'b>> {
    let topic = self.topic.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let bids = self.bids.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let asks = self.asks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    OrderBook::create(_fbb, &OrderBookArgs{
      topic,
      bids,
      asks,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OrderBook`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_unchecked`.
pub fn root_as_order_book(buf: &[u8]) -> Result<OrderBook, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrderBook>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrderBook` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_book_unchecked`.
pub fn size_prefixed_root_as_order_book(buf: &[u8]) -> Result<OrderBook, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrderBook>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrderBook` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_unchecked`.
pub fn root_as_order_book_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBook<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrderBook<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrderBook` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_unchecked`.
pub fn size_prefixed_root_as_order_book_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBook<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrderBook<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrderBook and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrderBook`.
pub unsafe fn root_as_order_book_unchecked(buf: &[u8]) -> OrderBook {
  flatbuffers::root_unchecked::<OrderBook>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrderBook and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrderBook`.
pub unsafe fn size_prefixed_root_as_order_book_unchecked(buf: &[u8]) -> OrderBook {
  flatbuffers::size_prefixed_root_unchecked::<OrderBook>(buf)
}
#[inline]
pub fn finish_order_book_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OrderBook<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_book_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OrderBook<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
