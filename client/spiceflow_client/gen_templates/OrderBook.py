# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gen_templates

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrderBook(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrderBook()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrderBook(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OrderBook
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrderBook
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OrderBook
    def Bids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from spiceflow_client.gen_templates.PriceLevel import PriceLevel
            obj = PriceLevel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderBook
    def BidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderBook
    def BidsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OrderBook
    def Asks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from spiceflow_client.gen_templates.PriceLevel import PriceLevel
            obj = PriceLevel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderBook
    def AsksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderBook
    def AsksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def OrderBookStart(builder):
    builder.StartObject(3)

def Start(builder):
    OrderBookStart(builder)

def OrderBookAddTopic(builder, topic):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)

def AddTopic(builder, topic):
    OrderBookAddTopic(builder, topic)

def OrderBookAddBids(builder, bids):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bids), 0)

def AddBids(builder, bids):
    OrderBookAddBids(builder, bids)

def OrderBookStartBidsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBidsVector(builder, numElems):
    return OrderBookStartBidsVector(builder, numElems)

def OrderBookAddAsks(builder, asks):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(asks), 0)

def AddAsks(builder, asks):
    OrderBookAddAsks(builder, asks)

def OrderBookStartAsksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAsksVector(builder, numElems):
    return OrderBookStartAsksVector(builder, numElems)

def OrderBookEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderBookEnd(builder)
